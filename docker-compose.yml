services:
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
        PORT: ${PORT_BACKEND}
        SALT_ROUNDS: ${SALT_ROUNDS}
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - ./backend/swagger.yaml:/app/swagger.yaml:ro
      - ./backend/package.json:/app/package.json
      - ./backend/package-lock.json:/app/package-lock.json
      - ./backend/tsconfig.json:/app/tsconfig.json
    env_file:
      - ./.env
    ports:
      - '${PORT_BACKEND}:${PORT_BACKEND}'
    networks:
      - app-network
    command: >
      npm run start:dev

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
        PORT: ${PORT_FRONTEND}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        WATCHPACK_POLLING: ${WATCHPACK_POLLING}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./.env
    ports:
      - '${PORT_FRONTEND}:${PORT_FRONTEND}'
    depends_on:
      - backend
    networks:
      - app-network
    command: >
      npm run dev

  prisma-studio:
    build:
      context: ./backend
      dockerfile: dockerfile
      args:
        PRISMA_STUDIO_PORT: ${PRISMA_STUDIO_PORT}
    env_file:
      - ./.env
    volumes:
      - backend-db-data:/app/database
    command: >
      sh -c "npx prisma studio --schema=prisma/sqlite/schema.prisma --port=5555 --hostname=0.0.0.0"
    ports:
      - "${PRISMA_STUDIO_PORT}:${PRISMA_STUDIO_PORT}"
    depends_on:
      - backend
    networks:
      - app-network
  
  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger-ui
    depends_on:
      - backend
    ports:
      - "8081:8080"
    volumes:
      - ./backend/swagger.yaml:/swagger.yaml:ro
    environment:
      - SWAGGER_JSON=/swagger.yaml
    networks:
      - app-network

volumes:
  backend-db-data:
    driver: local

networks:
  app-network:
    driver: bridge