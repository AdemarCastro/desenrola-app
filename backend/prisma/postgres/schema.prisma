// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  primeiro_nome   String
  sobrenome       String
  senha           String
  data_nascimento DateTime
  idade           Int?       @default(0)
  status_id       Int
  nivel_acesso_id Int        @default(1)
  logout_em       DateTime?
  criado_em       DateTime   @default(now())
  atualizado_em   DateTime   @updatedAt
  apagado_em      DateTime?

  status       StatusUsuario  @relation(fields: [status_id], references: [id])
  nivel_acesso NivelAcesso    @relation(fields: [nivel_acesso_id], references: [id])
  projetos     ProjetoUsuario[]
  comentarios  Comentario[]
}

model NivelAcesso {
  id          Int       @id @default(autoincrement())
  nome        String    @unique

  usuarios    Usuario[]
  projetos    ProjetoUsuario[]

  @@map("niveis_acesso")
}

model Projeto {
  id            Int       @id @default(autoincrement())
  nome          String
  descricao     String?
  data_entrega  DateTime?
  criado_em     DateTime  @default(now())
  atualizado_em DateTime  @updatedAt
  apagado_em    DateTime?

  usuarios ProjetoUsuario[]
  tarefas  Tarefa[]
}

model ProjetoUsuario {
  id          Int       @id @default(autoincrement())
  usuario_id  Int
  projeto_id  Int
  nivel_acesso_id Int
  criado_em   DateTime  @default(now())
  atualizado_em DateTime @updatedAt
  apagado_em  DateTime?

  usuario     Usuario   @relation(fields: [usuario_id], references: [id])
  projeto     Projeto   @relation(fields: [projeto_id], references: [id])
  nivel_acesso NivelAcesso? @relation(fields: [nivel_acesso_id], references: [id])

}

model StatusTarefa {
  id     Int    @id @default(autoincrement())
  nome   String @unique
  tarefas Tarefa[]
}

model PrioridadeTarefa {
  id     Int    @id @default(autoincrement())
  nome   String @unique
  tarefas Tarefa[]
}

model Tarefa {
  id                  Int      @id @default(autoincrement())
  descricao           String
  status_id           Int
  prioridade_id       Int
  criado_em           DateTime @default(now())
  atualizado_em       DateTime @updatedAt
  apagado_em          DateTime?

  status              StatusTarefa @relation(fields: [status_id], references: [id])
  prioridade          PrioridadeTarefa @relation(fields: [prioridade_id], references: [id])
  projeto             Projeto @relation(fields: [id_projeto], references: [id])
  id_projeto          Int

  comentarios         Comentario[]
}

model StatusUsuario {
  id      Int      @id @default(autoincrement())
  nome    String   @unique
  usuarios Usuario[]
}

model Comentario {
  id            Int       @id @default(autoincrement())
  conteudo      String
  criado_em     DateTime  @default(now())
  atualizado_em DateTime  @updatedAt
  apagado_em    DateTime?

  tarefa    Tarefa @relation(fields: [id_tarefa], references: [id])
  id_tarefa Int

  usuario    Usuario @relation(fields: [id_usuario], references: [id])
  id_usuario Int
}